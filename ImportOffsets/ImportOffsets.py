#Author-Robert Marchese
#Description-Generate a 3D model of a boat hull from a table of offsets

import adsk.core, adsk.fusion, adsk.cam, traceback
import json

# Pull in points generated by 'python linetab2solid.py Cartopper.csv'
#bottom=[[6.0, 21.0, 0.0], [7.625, 23.25, 12.0], [9.0, 25.25, 24.0], [10.25, 26.75, 36.0], [10.875, 27.625, 48.0], [11.25, 28.0, 60.0], [10.625, 27.875, 72.0], [9.25, 27.25, 84.0], [7.0, 26.125, 96.0], [4.125, 24.625, 108.0], [0.75, 21.5, 120.0], [0.25, 16.25, 129.0], [0.125, 3.0, 138.0]]
#chine=[[13.375, 16.125, 0.0], [15.75, 17.625, 12.0], [18.0, 19.0, 24.0], [19.875, 20.0, 36.0], [21.0, 20.75, 48.0], [21.5, 21.0, 60.0], [21.0, 20.625, 72.0], [19.375, 19.75, 84.0], [16.75, 18.25, 96.0], [12.875, 15.875, 108.0], [8.0, 12.875, 120.0], [3.625, 10.25, 129.0], [0.5, 2.0, 138.0]]
#gunwale=[[15.875, 7.75, 0.0], [18.25, 9.5, 12.0], [20.375, 10.875, 24.0], [22.25, 11.75, 36.0], [23.625, 12.125, 48.0], [24.125, 12.125, 60.0], [23.625, 11.5, 72.0], [22.125, 10.5, 84.0], [19.375, 9.125, 96.0], [15.5, 7.375, 108.0], [10.25, 5.125, 120.0], [5.625, 3.25, 129.0], [0.5, 1.0, 138.0]]
offset_data = {"sections": [[[0, 32.75, 0.0], [0.875, 32.75, 0.0], [0.875, 14.0, 0.0], [0.5, 14.0, 0.0], [0.5, 13.25, 0.0], [0, 13.25, 0.0]], [[0, 32.75, 24.0], [6.875, 32.75, 24.0], [13.375, 30.125, 24.0], [8.375, 13.0, 24.0], [0.5, 13.0, 24.0], [0.5, 12.25, 24.0], [0, 12.25, 24.0]], [[0, 30.375, 48.0], [16.0, 30.375, 48.0], [23.0, 27.625, 48.0], [16.875, 11.125, 48.0], [0.5, 11.125, 48.0], [0.5, 10.625, 48.0], [0, 10.625, 48.0]], [[0, 28.625, 72.0], [21.25, 28.625, 72.0], [28.25, 25.75, 72.0], [21.875, 10.0, 72.0], [0.5, 10.0, 72.0], [0.5, 9.25, 72.0], [0, 9.25, 72.0]], [[0, 27.75, 96.0], [22.75, 27.75, 96.0], [29.125, 25.0, 96.0], [22.875, 10.0, 96.0], [0.5, 10.0, 96.0], [0.5, 9.25, 96.0], [0, 9.25, 96.0]], [[0, 28.0, 120.0], [20.75, 28.0, 120.0], [27.25, 25.125, 120.0], [21.25, 12.25, 120.0], [0.5, 12.25, 120.0], [0.5, 5.125, 120.0], [0, 5.125, 120.0]], [[0, 29.25, 144.0], [17.375, 29.25, 144.0], [24.0, 26.375, 144.0], [18.625, 16.25, 144.0], [0.5, 16.25, 144.0], [0.5, 3.375, 144.0], [0, 3.375, 144.0]], [[0, 31.5, 168.0], [14.0, 31.5, 168.0], [20.5, 28.5, 168.0], [17.125, 19.25, 168.0], [0.5, 19.25, 168.0], [0.5, 2.5, 168.0], [0, 2.5, 168.0]]], "lines": {"coaming": [[6.875, 32.75, 24.0], [16.0, 30.375, 48.0], [21.25, 28.625, 72.0], [22.75, 27.75, 96.0], [20.75, 28.0, 120.0], [17.375, 29.25, 144.0], [14.0, 31.5, 168.0]], "sheer": [[0.875, 32.75, 0.0], [13.375, 30.125, 24.0], [23.0, 27.625, 48.0], [28.25, 25.75, 72.0], [29.125, 25.0, 96.0], [27.25, 25.125, 120.0], [24.0, 26.375, 144.0], [20.5, 28.5, 168.0]], "chine": [[0.875, 14.0, 0.0], [8.375, 13.0, 24.0], [16.875, 11.125, 48.0], [21.875, 10.0, 72.0], [22.875, 10.0, 96.0], [21.25, 12.25, 120.0], [18.625, 16.25, 144.0], [17.125, 19.25, 168.0]], "bottom": [[0.5, 14.0, 0.0], [0.5, 13.0, 24.0], [0.5, 11.125, 48.0], [0.5, 10.0, 72.0], [0.5, 10.0, 96.0], [0.5, 12.25, 120.0], [0.5, 16.25, 144.0], [0.5, 19.25, 168.0]], "skeg": [[0.5, 13.25, 0.0], [0.5, 12.25, 24.0], [0.5, 10.625, 48.0], [0.5, 9.25, 72.0], [0.5, 9.25, 96.0], [0.5, 5.125, 120.0], [0.5, 3.375, 144.0], [0.5, 2.5, 168.0]]}}


def add_spline(point_list, sketch):
    '''Adds a spline to the current drawing given an set of points in 3-space'''

    # Create an object to store the points in
    points = adsk.core.ObjectCollection.create()

    for p in point_list:
        points.add(adsk.core.Point3D.create(*p))

    # Create the spline.
    sketch.sketchCurves.sketchFittedSplines.add(points)

    # Do again for other side (TODO: Mirror?)
    points1 = adsk.core.ObjectCollection.create()
    for p in point_list:
        points1.add(adsk.core.Point3D.create(-p[0], p[1], p[2]))

    sketch.sketchCurves.sketchFittedSplines.add(points1)

    return points


def add_cross_section(i, sketch, point_list):

    # TODO: generalize drawing a polygon from list of 2D points
    # TODO: mirror the half section into a single list of points
    lines = sketch.sketchCurves.sketchLines;

    # project the first point on the center line at start there
    p_start = adsk.core.Point3D.create(0, point_list[0][1], 0)
    p0 = p_start
    for p in point_list:
        new_line = lines.addByTwoPoints(p0, adsk.core.Point3D.create(p[0], p[1], 0))
        p0 = new_line.endSketchPoint

    # End at last point projected to center line
    p_end = adsk.core.Point3D.create(0, point_list[-1][1], 0)
    new_line = lines.addByTwoPoints(p0, p_end)

    # Close it by connecting p_end back to P_start
    new_line = lines.addByTwoPoints(p_end, p_start)


def add_offset_plane (comp, sketch, z):
    planes = comp.constructionPlanes
    planeInput = planes.createInput()
    offsetValue = adsk.core.ValueInput.createByReal(z)
    planeInput.setByOffset(comp.xYConstructionPlane, offsetValue)
    planes.add(planeInput)

    return planes[-1]


def scale_coordinates(in_list, scale):
    # TODO: make this a numpy array operation
    out_list = []
    for point in in_list:
        out_list.append([scale * a for a in point])

    return out_list


def run(context):
    ui = None
    try:
        app = adsk.core.Application.get()
        ui  = app.userInterface
        #ui.messageBox('Hello script')

        design = app.activeProduct
        if not design:
            ui.messageBox('No active Fusion 360 design', 'No Design')
            return

        # Get the root component of the active design.
        rootComp = design.rootComponent

        # Create a new occurrence.
        trans = adsk.core.Matrix3D.create()
        occ = rootComp.occurrences.addNewComponent(trans)

        # Get the associated component.
        newComp = occ.component

        # Create a new sketch on the xy plane.
        sketch = newComp.sketches.add(rootComp.xYConstructionPlane)

        # hardcode mm to cm, TODO: fold this into other drawing and units scalings
        #bottom = scale_coordinates(bottom, .1)
        #chine = scale_coordinates(chine, .1)
        #gunwale = scale_coordinates(gunwale, .1)

        # Create a spline (two of them actually) for each line
        #add_spline(bottom, sketch)
        #add_spline(chine, sketch)
        #add_spline(gunwale, sketch)
        for name,coords in offset_data['lines'].items():
            coords = scale_coordinates(coords, .1)
            add_spline(coords, sketch)
        
        # Create construction planes for the cross sections
        #for i,bp in enumerate(bottom):
        #    newConstPlane = add_offset_plane(newComp, sketch, bp[2])
        #    newSketch = newComp.sketches.add(newConstPlane)
        #    add_cross_section(i, newSketch, [bottom[i], chine[i], gunwale[i]])
        for i,section in enumerate(offset_data['sections']):
            section = scale_coordinates(section, .1)
            newConstPlane = add_offset_plane(newComp, sketch, section[0][2])
            newSketch = newComp.sketches.add(newConstPlane)
            add_cross_section(i, newSketch, section)

    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))
